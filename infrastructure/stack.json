{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This AWS CloudFormation template Create/Update infrastructure of Authorization Service",
  "Parameters": {
    "UserName": {
      "Type": "String",
      "Default": "authorization-service",
      "Description": "User name"
    },
    "DeploymentBucket": {
      "Type": "String",
      "Description": "S3 bucket name where contains compiled lambdas"
    },
    "Build": {
      "Type": "String",
      "Description": "Build version of compiled lambdas"
    }
  },
  "Resources": {
    "ServerLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${ServerLambda}"
        },
        "RetentionInDays": 3
      }
    },
    "ServerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucket"
          },
          "S3Key": {
            "Fn::Sub": "${UserName}/${Build}/authorization-service-server-1.0-SNAPSHOT.jar"
          }
        },
        "Description": "The Authorization Server lambda of Authorization Service",
        "Environment": {
          "Variables": {
            "AWS_COGNITO_CLIENT_ID": {
              "Ref": "AuthorizationServerApp"
            },
            "AWS_COGNITO_USER_POOL_ID": {
              "Ref": "UserPool"
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${UserName}-server"
        },
        "Handler": "com.github.vitalibo.authorization.server.infrastructure.aws.lambda.ProxyRequestHandler",
        "MemorySize": 512,
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${UserName}-server-lambda-role"
        },
        "Runtime": "java11",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "UserName"
            }
          }
        ]
      }
    },
    "ServerLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ServerLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerRestApi}/*/*"
        }
      }
    },
    "BasicAuthenticatorLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${BasicAuthenticatorLambda}"
        },
        "RetentionInDays": 3
      }
    },
    "BasicAuthenticatorLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucket"
          },
          "S3Key": {
            "Fn::Sub": "${UserName}/${Build}/authorization-service-basic-authenticator-1.0-SNAPSHOT.jar"
          }
        },
        "Description": "The Basic Authenticator lambda of Authorization Service",
        "Environment": {
          "Variables": {
            "AWS_COGNITO_CLIENT_ID": {
              "Ref": "AuthorizationServerApp"
            },
            "AWS_COGNITO_USER_POOL_ID": {
              "Ref": "UserPool"
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${UserName}-basic-authenticator"
        },
        "Handler": "com.github.vitalibo.authorization.basic.infrastructure.aws.lambda.AuthorizerRequestHandler",
        "MemorySize": 512,
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${UserName}-basic-authenticator-lambda-role"
        },
        "Runtime": "java11",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "UserName"
            }
          }
        ]
      }
    },
    "JwtAuthorizerLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/lambda/${JwtAuthorizerLambda}"
        },
        "RetentionInDays": 3
      }
    },
    "JwtAuthorizerLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "DeploymentBucket"
          },
          "S3Key": {
            "Fn::Sub": "${UserName}/${Build}/authorization-service-jwt-authorizer-1.0-SNAPSHOT.jar"
          }
        },
        "Description": "The JWT Authorizer lambda of Authorization Service",
        "Environment": {
          "Variables": {
            "AWS_COGNITO_USER_POOL_ID": {
              "Ref": "UserPool"
            }
          }
        },
        "FunctionName": {
          "Fn::Sub": "${UserName}-jwt-authorizer"
        },
        "Handler": "com.github.vitalibo.authorization.jwt.infrastructure.aws.lambda.AuthorizerRequestHandler",
        "MemorySize": 512,
        "Role": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${UserName}-jwt-authorizer-lambda-role"
        },
        "Runtime": "java11",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "ServiceName",
            "Value": {
              "Ref": "UserName"
            }
          }
        ]
      }
    },
    "JwtAuthorizerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "JwtAuthorizerLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerRestApi}/*/*",
        }
      }
    },
    "ServerRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Sub": "${UserName}-server"
        },
        "Description": {
          "Fn::Sub": "Server Rest API of Authorization Service"
        }
      }
    },
    "ApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ServerRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ServerRestApi"
        }
      }
    },
    "ApiProxyMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ServerLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Ref": "ApiResource"
        },
        "RestApiId": {
          "Ref": "ServerRestApi"
        }
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ServerRestApi"
        }
      },
      "DependsOn": [
        "ApiProxyMethod"
      ]
    },
    "ApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiDeployment"
        },
        "RestApiId": {
          "Ref": "ServerRestApi"
        },
        "StageName": "v1"
      },
      "DependsOn": "ApiDeployment"
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
          "UnusedAccountValidityDays": 90
        },
        "AliasAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "MfaConfiguration": "OFF",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": false,
            "RequireUppercase": true
          }
        },
        "UserPoolName": {
          "Fn::Sub": "${UserName}-user-pool"
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "DeveloperOnlyAttribute": false,
            "Mutable": true,
            "Name": "email",
            "StringAttributeConstraints": {
              "MaxLength": 128,
              "MinLength": 5
            },
            "Required": "true"
          }
        ]
      }
    },
    "AuthorizationServerApp": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": {
          "Fn::Sub": "${UserName}-server-application"
        },
        "ExplicitAuthFlows": [
          "ADMIN_NO_SRP_AUTH"
        ],
        "GenerateSecret": false,
        "RefreshTokenValidity": 30,
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "AdminUser": {
      "Type": "AWS::Cognito::UserPoolUser",
      "Properties": {
        "UserAttributes": [
          {
            "Name": "email",
            "Value": "boyarsky.vitaliy@live.com"
          }
        ],
        "Username": "admin",
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "ApiGatewayGroup": {
      "Type": "AWS::Cognito::UserPoolGroup",
      "Properties": {
        "Description": "This group allow execute Amazon API Gateway ANY resources",
        "GroupName": "ApiGatewayFullAccess",
        "RoleArn": {
          "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${UserName}-api-gateway-full-access-role"
        },
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    },
    "UserToGroupAttachment": {
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
      "Properties": {
        "GroupName": {
          "Ref": "ApiGatewayGroup"
        },
        "Username": {
          "Ref": "AdminUser"
        },
        "UserPoolId": {
          "Ref": "UserPool"
        }
      }
    }
  },
  "Outputs": {
    "UserPoolId": {
      "Value": {
        "Ref": "UserPool"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${UserName}-UserPoolId"
        }
      }
    },
    "UserPoolArn": {
      "Value": {
        "Fn::GetAtt": [
          "UserPool",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${UserName}-UserPoolArn"
        }
      }
    },
    "ClientId": {
      "Value": {
        "Ref": "AuthorizationServerApp"
      }
    },
    "ServiceEndpoint": {
      "Value": {
        "Fn::Sub": "https://${ServerRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}"
      }
    }
  }
}